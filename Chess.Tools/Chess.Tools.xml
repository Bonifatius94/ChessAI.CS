<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Chess.DataTools</name>
    </assembly>
    <members>
        <member name="T:Chess.DataTools.ChessGameFileSerializer">
            <summary>
            Helps serializing chess games between the chess game format.
            </summary>
        </member>
        <member name="M:Chess.DataTools.ChessGameFileSerializer.Serialize(System.String,System.Collections.Generic.IEnumerable{Chess.Lib.ChessGame})">
            <summary>
            Write the given chess games to the given file path.
            </summary>
            <param name="filePath">The output chess game file path.</param>
            <param name="games">The games to write to serialize.</param>
        </member>
        <member name="M:Chess.DataTools.ChessGameFileSerializer.Deserialize(System.String)">
            <summary>
            Read games from chess games format.
            </summary>
            <param name="filePath">The file path of the chess games file.</param>
            <returns>a list of chess games</returns>
        </member>
        <member name="T:Chess.DataTools.PGN.CachedPgnParser">
            <summary>
            A parser class to extract chess games from PGN (portable game notation) log files.
            </summary>
        </member>
        <member name="M:Chess.DataTools.PGN.CachedPgnParser.ParsePgnFile(System.String)">
            <summary>
            Retrieve the chess games from the given PGN file.
            </summary>
            <param name="filePath">The PGN file to be parsed.</param>
            <returns>a list of chess games</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.CachedPgnParser.extractGameLogs(System.String)">
            <summary>
            Divide the raw PGN text content into the content belonging to each game.
            </summary>
            <param name="content">The raw PGN text content from a PGN file.</param>
            <returns>a list of raw PGN game logs, each element's content belongs to another chess game</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.CachedPgnParser.parseGameLog(System.String)">
            <summary>
            Retrieve the chess game data from a single PGN game log.
            </summary>
            <param name="log">The PGN game log to be parsed.</param>
            <returns>The chess game data to was parsed.</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.CachedPgnParser.parseRound(Chess.Lib.ChessGame,System.String)">
            <summary>
            Retrieve a round (white draw and black answer).
            </summary>
            <param name="game">The chess game with all previous draws.</param>
            <param name="content">The PGN game log content to be parsed (content equals two draws).</param>
            <returns>The draws parsed.</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.CachedPgnParser.parseDraw(Chess.Lib.ChessGame,System.String)">
            <summary>
            Retrieve a single chess draw from the given PGN content.
            </summary>
            <param name="game">The chess game with all previous draws.</param>
            <param name="content">The PGN content to be parsed.</param>
            <returns>The parsed chess draw or null (if there was a data format error).</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.CachedPgnParser.parseRochade(Chess.Lib.ChessGame,System.String)">
            <summary>
            Parse a rochade draw from the given PGN content.
            </summary>
            <param name="game">The chess game with all previous draws.</param>
            <param name="content">The PGN content to be parsed.</param>
            <returns>The parsed rochade draw</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.CachedPgnParser.parseMetadataDraw(Chess.Lib.ChessGame,System.String)">
            <summary>
            Parse a metadata draw from the given PGN content.
            </summary>
            <param name="game">The chess game with all previous draws.</param>
            <param name="content">The PGN content to be parsed.</param>
            <returns>The parsed metadata draw</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.CachedPgnParser.parseType(System.Char)">
            <summary>
            Convert the given character into a chess piece type (K=King, Q=Queen, R=Rook, B=Bishop, N=Knight, P=Peasant).
            </summary>
            <param name="c">The character to convert.</param>
            <returns>The parsed chess piece type</returns>
            <exception cref="T:System.ArgumentException">Throws an argument exception if the given character does not belong to a chess piece type.</exception>
        </member>
        <member name="T:Chess.DataTools.PGN.IPgnParser">
            <summary>
            An interface implementing a parser for the PGN chess game notation.
            </summary>
        </member>
        <member name="M:Chess.DataTools.PGN.IPgnParser.ParsePgnFile(System.String)">
            <summary>
            Retrieve the chess games from the given PGN file.
            </summary>
            <param name="filePath">The PGN file to be parsed.</param>
            <returns>a list of chess games</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.StreamPgnParser.ParsePgnFile(System.String)">
            <summary>
            Retrieve the chess games from the given PGN file.
            </summary>
            <param name="filePath">The PGN file to be parsed.</param>
            <returns>a list of chess games</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.StreamPgnParser.tryParseMetadataDraw(System.String,Chess.Lib.ChessGame,Chess.Lib.ChessDraw@)">
            <summary>
            Parse a metadata draw from the given PGN content.
            </summary>
            <param name="game">The chess game with all previous draws.</param>
            <param name="content">The PGN content to be parsed.</param>
            <param name="draw">The parsed draw (result).</param>
            <returns>Indicates whether the parsing was successful.</returns>
        </member>
        <member name="M:Chess.DataTools.PGN.StreamPgnParser.parseType(System.Char)">
            <summary>
            Convert the given character into a chess piece type (K=King, Q=Queen, R=Rook, B=Bishop, N=Knight, P=Peasant).
            </summary>
            <param name="c">The character to convert.</param>
            <returns>The parsed chess piece type</returns>
            <exception cref="T:System.ArgumentException">Throws an argument exception if the given character does not belong to a chess piece type.</exception>
        </member>
        <member name="T:Chess.DataTools.SQLite.SqliteDataContextBase">
            <summary>
            Provide base functionality to run SQL via a SQLite connection.
            </summary>
        </member>
        <member name="M:Chess.DataTools.SQLite.SqliteDataContextBase.queryItems(System.String)">
            <summary>
            Run a SQL query and retrieve the data as a result set.
            </summary>
            <param name="sql">The SQL statement to be queried.</param>
            <returns>A set of records returned by the SQLite data source.</returns>
        </member>
        <member name="M:Chess.DataTools.SQLite.SqliteDataContextBase.queryItem(System.String)">
            <summary>
            Run a SQL query and retrieve a single data record.
            </summary>
            <param name="sql">The SQL statement to be queried.</param>
            <returns>A single data record returned by the SQLite data source.</returns>
        </member>
        <member name="M:Chess.DataTools.SQLite.SqliteDataContextBase.queryItem(System.String,System.String)">
            <summary>
            Run a SQL query and retrieve a specific column from a single data record.
            </summary>
            <param name="sql">The SQL statement to be queried.</param>
            <returns>A specific column from a single data record returned by the SQLite data source.</returns>
        </member>
        <member name="M:Chess.DataTools.SQLite.SqliteDataContextBase.executeScript(System.String)">
            <summary>
            
            </summary>
            <param name="scriptFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Chess.DataTools.SQLite.SqliteDataContextBase.executeSql(System.String)">
            <summary>
            Run a writing SQL statement and retrieve the number of records affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <returns>The number of records affected (-1 signals an error).</returns>
        </member>
        <member name="M:Chess.DataTools.SQLite.SqliteDataContextBase.executeSql(System.String,Microsoft.Data.Sqlite.SqliteConnection)">
            <summary>
            Run a writing SQL statement and retrieve the number of records affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The database connection to be used.</param>
            <returns>The number of records affected (-1 signals an error).</returns>
        </member>
        <member name="M:Chess.DataTools.SQLite.SqliteDataContextBase.readItems(System.Data.Common.DbDataReader)">
            <summary>
            Help parsing a SQLite result set with multiple records and columns.
            </summary>
            <param name="reader">The data reader containing the raw queried data.</param>
            <returns>A result set of (column name, value) tuples as a dictionary.</returns>
        </member>
        <member name="M:Chess.DataTools.SQLite.SqliteDataContextBase.readItem(System.Data.Common.DbDataReader)">
            <summary>
            Help parsing a single record with multiple columns from a SQLite result set.
            </summary>
            <param name="reader">The data reader containing the raw queried data.</param>
            <returns>A record with all (column name, value) tuples as a dictionary.</returns>
        </member>
        <member name="T:Chess.DataTools.SQLite.WinRateDataContext">
            <summary>
            REpresents a SQLite data conext for writing / retrieving win rates of chess draws.
            </summary>
        </member>
        <member name="M:Chess.DataTools.SQLite.WinRateDataContext.#ctor(System.String)">
            <summary>
            Create a new instance that handles the SQLite database at the given file path. An empty database is created if the file does not exist.
            </summary>
            <param name="dbFilePath">The file path of the SQLite database.</param>
        </member>
        <member name="M:Chess.DataTools.SQLite.WinRateDataContext.InsertWinRates(System.Collections.Generic.IEnumerable{Chess.DataTools.WinRateInfo})">
            <summary>
            Insert the given win rates into database.
            </summary>
            <param name="winRates">A list of win rates to be inserted into database.</param>
        </member>
        <member name="M:Chess.DataTools.SQLite.WinRateDataContext.GetBestDraw(Chess.Lib.ChessBoard,System.Nullable{Chess.Lib.ChessDraw})">
            <summary>
            Retrieve the best chess draw for the given situation (board + previous draw) from the cache. If the situation is not in the cache, null is returned.
            </summary>
            <param name="board">The chess board representing the situation.</param>
            <param name="predecedingDraw">The previous draw made by the enemy.</param>
            <returns>The best chess draw (if there is one in the cache)</returns>
        </member>
        <member name="T:Chess.DataTools.WinRateInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Chess.DataTools.WinRateInfoHelper">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
